name: Build and Compile Python Application

on:
  push:
    branches:
      - main
    pull_request:
      branches:
        - main

env:
  PROJECT_NAME: 'helloworld'

jobs:
  build-windows_x64:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Environment
        run: |
          pip install briefcase==0.3.23 nuitka==1.0.6 ordered-set==4.1.0

      - name: compile app to pyd with nuitka
        shell: cmd
        run: |
          cd src/%PROJECT_NAME%
          python -m nuitka --module app --include-package=app --output-dir=dist --remove-output
          copy .\dist\*.pyd .
          rmdir /S /Q .\dist

      - name: package coode with briefcase
        shell: cmd
        run: |
          briefcase create
          briefcase build
          briefcase package -p zip

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          name: win64
          path: dist/*.zip


  build-armv7:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build for ARMv7
        uses: uraimo/run-on-arch-action@v3
        id: build4arm7
        with:
          architecture: armv7
          distro: bullseye
          githubToken: ${{ github.token }}
          run: |
            apt-get update && apt-get install -y \
              git \
              gcc \
              python3-pip \
              python3-dev \
              patchelf

            python3 -m pip install --upgrade pip
            pip3 install briefcase==0.3.23 nuitka==2.4.11 --extra-index-url https://www.piwheels.org/simple

            cd src/$PROJECT_NAME
            python3 -m nuitka --module app --include-package=app --output-dir=dist --remove-output
            cp .\dist\*.so .
            rm -rf .\dist

            cd ..\..
            briefcase create
            briefcase build
            briefcase package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arm7
          path: dist/*.deb

#  build-linux_armv7:
#    runs-on: ubuntu-latest
#    env:
#      QEMU_ARCH: arm
#      QEMU_STATIC: /usr/bin/qemu-arm-static
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up QEMU and debootstrap
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y qemu-user-static debootstrap
#
#      - name: Set up ARM chroot environment (Bullseye)
#        run: |
#          sudo debootstrap --arch=armhf --variant=buildd bullseye /mnt/arm-rootfs http://raspbian.raspberrypi.org/raspbian/
#          sudo cp /usr/bin/qemu-arm-static /mnt/arm-rootfs/usr/bin/
#          sudo mount --bind /dev /mnt/arm-rootfs/dev
#          sudo mount --bind /sys /mnt/arm-rootfs/sys
#          sudo mount --bind /proc /mnt/arm-rootfs/proc
#
#      - name: Install utilities in ARM chroot
#        run: |
#          sudo chroot /mnt/arm-rootfs /bin/bash -c "apt-get update && apt-get install -y wget python3.9 python3.9-dev python3.9-distutils patchelf"
#
#      - name: Ensure 'pip' is installed for Python 3.9 in ARM chroot
#        run: |
#          sudo chroot /mnt/arm-rootfs /bin/bash -c "wget https://bootstrap.pypa.io/get-pip.py && python3.9 get-pip.py && rm get-pip.py"
#
#      - name: Install Nuitka in ARM chroot
#        run: |
#          sudo chroot /mnt/arm-rootfs /bin/bash -c "pip3 install nuitka==1.0.6 orderedset==2.0.3"
#
#      - name: Compile for ARMv7
#        run: |
#          sudo chroot /mnt/arm-rootfs /bin/bash -c "mkdir -p /github/workspace"
#          sudo cp -r . /mnt/arm-rootfs/github/workspace
#          sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace && python3.9 -m nuitka --module app --include-package=app --show-progress  --output-dir=out --remove-output"
#      #     sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace && python3.9 -m nuitka --standalone --onefile hello.py"
#      #     sudo chroot /mnt/arm-rootfs /bin/bash -c "ls -lF /github/workspace/hello.dist"
#
#      # - name: Check if hello.dist directory exists
#      #   run: |
#      #     sudo chroot /mnt/arm-rootfs /bin/bash -c "ls -ld /github/workspace/hello.dist"
#
#      # - name: Check if hello file exists
#      #   run: |
#      #     sudo chroot /mnt/arm-rootfs /bin/bash -c "ls -l /github/workspace/hello.dist/hello"
#
#      # - name: Copy ARM executable to host
#      #   run: |
#      #     sudo mkdir -p /github/workspace/hello_arm/
#      #     sudo cp /mnt/arm-rootfs/github/workspace/hello.dist/hello /github/workspace/hello_arm/hello.bin
#      #     ls -l /github/workspace/hello_arm/
#      #     sudo chmod +x /github/workspace/hello_arm/hello.bin
#
#      # - name: Check if hello_arm directory exists
#      #   run: |
#      #     ls -ld /github/workspace/hello_arm/
#
#      # - name: Check if hello.bin file exists
#      #   run: |
#      #     ls -l /github/workspace/hello_arm/hello.bin
#
#      # - name: Upload ARM Executable
#      #   uses: actions/upload-artifact@v4
#      #   with:
#      #     name: arm-executable
#      #     path: /github/workspace/hello_arm/hello.bin
#
#      - name: Copy ARM executable to host
#        run: |
#          sudo mkdir -p /github/workspace/out/
#          sudo cp /mnt/arm-rootfs/github/workspace/out/*.so /github/workspace/out/
#
#      - name: Upload ARM Executable
#        uses: actions/upload-artifact@v4
#        with:
#          name: arm-executable
#          path: /github/workspace/out/*.so
#
#      - name: Clean up chroot environment
#        run: |
#          if mountpoint -q /mnt/arm-rootfs/dev; then sudo umount /mnt/arm-rootfs/dev; fi
#          if mountpoint -q /mnt/arm-rootfs/sys; then sudo umount /mnt/arm-rootfs/sys; fi
#          if mountpoint -q /mnt/arm-rootfs/proc; then sudo umount /mnt/arm-rootfs/proc; fi
#          if mountpoint -q /mnt/arm-rootfs; then sudo umount /mnt/arm-rootfs; fi
#          sudo rm -rf /mnt/arm-rootfs