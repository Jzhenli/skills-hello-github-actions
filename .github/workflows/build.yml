# name: Build and Compile Python Application

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# env:
#   PROJECT_NAME: helloworld

# jobs:
#   build-Win64:
#     runs-on: windows-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Setup Environment
#         run: |
#           pip install briefcase==0.3.23 nuitka==1.0.6 ordered-set==4.1.0

#       - name: compile app to pyd with nuitka
#         shell: cmd
#         run: |
#           cd src/%PROJECT_NAME%
#           python -m nuitka --module app --include-package=app --output-dir=dist --remove-output
#           copy .\dist\*.pyd .
#           rmdir /S /Q .\dist
#           rmdir /S /Q .\app

#       - name: package coode with briefcase
#         shell: cmd
#         run: |
#           briefcase create
#           briefcase build
#           briefcase package -p zip

#       - name: Upload Windows Executable
#         uses: actions/upload-artifact@v4
#         with:
#           name: Win64
#           path: dist/*.zip


#   build-ARMv7:
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build for ARMv7
#         uses: uraimo/run-on-arch-action@v3
#         id: build4arm7
#         with:
#           arch: armv7
#           distro: bullseye
#           githubToken: ${{ github.token }}
#           env: '{ 
#               "PROJECT_NAME": "${{ env.PROJECT_NAME }}",
#               "PYPI_EXTRA_URL": "https://www.piwheels.org/simple"
#             }'
#           run: |
#             apt-get update && apt-get install -y \
#               git \
#               gcc \
#               python3-pip \
#               python3-dev \
#               patchelf

#             python3 -m pip install --upgrade pip
#             pip3 install briefcase==0.3.23 nuitka==2.4.11 --extra-index-url $PYPI_EXTRA_URL

#             cd "src/$PROJECT_NAME"
#             python3 -m nuitka --module app --include-package=app --output-dir=dist --remove-output
#             cp ./dist/*.so .
#             rm -rf dist
#             rm -rf app

#             cd ../..
#             briefcase create
#             briefcase build
#             briefcase package

#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: ARMv7
#           path: dist/*.deb


name: 'Test Termux' # empty name
on: [push, pull_request]

jobs:
  # This is what is currently necessary to make termux-docker work with GHA.
  working:
    strategy:
      matrix:
        include:
          - runner: ubuntu-24.04
            architecture: i686
          - runner: ubuntu-24.04
            architecture: x86_64
          - runner: ubuntu-24.04-arm
            architecture: arm
          - runner: ubuntu-24.04-arm
            architecture: aarch64
    runs-on: ${{ matrix.runner }}
    # prepare writable volume prefix mount for actions/upload-artifact,
    # based on the higher-profile workaround for 32-bit GNU/Linux containers explained here
    # https://github.com/actions/upload-artifact/issues/616#issuecomment-2350667347
    container:
      image: termux/termux-docker:${{ matrix.architecture }}
      volumes: 
        - /tmp/node20:/__e/node20
    # approximate environment variables for actions that can't be forced to use entrypoint.sh
    env:
      TERMUX_MAIN_PACKAGE_FORMAT: debian
      ANDROID_ROOT: /system
      ANDROID_DATA: /data
      PREFIX: /data/data/com.termux/files/usr
      HOME: /data/data/com.termux/files/home
      PATH: /data/data/com.termux/files/usr/bin
      TMPDIR: /data/data/com.termux/files/usr/tmp
      LANG: en_US.UTF-8
      TZ: UTC
    steps:
      - name: set pkg command to use the packages-cf.termux.dev mirror
        run: ln -sf ${PREFIX}/etc/termux/mirrors/default ${PREFIX}/etc/termux/chosen_mirrors
      - name: upgrade all packages to prepare for installing nodejs
        run: /entrypoint.sh bash -c "yes | pkg upgrade -y"
      # actions/checkout will "think" that termux's tar binary isn't executable if it doesn't have
      # executable bit actually set for all users, since even though that permissions restriction
      # doesn't actually apply to the root user (at least on Android), GitHub Actions' internal
      # source code doesn't "care" and would refuse to run the binary anyway.
      # relevant internal source code of GitHub Actions:
      # https://github.com/actions/toolkit/blob/930c89072712a3aac52d74b23338f00bb0cfcb24/packages/io/src/io-util.ts#L167-L177
      - name: fix executable bit for all binaries in $PREFIX/bin for all users
        run: chmod -R o+x ${PREFIX}/bin
      - name: install bionic-libc nodejs to force compatibility with actions/checkout and actions/upload-artifact
        run: |
          /entrypoint.sh pkg install -y nodejs-lts
          ln -sf ${PREFIX}/bin /__e/node20/bin
      - uses: actions/checkout@v4.2.2
      - name: fix permissions of repository after actions/checkout, which ran as root user, while entrypoint.sh activates system user (1000)
        run: chown -R 1000:1000 .
      - name: setup
        run: |
          # pkg/pip need to be prefixed with /entrypoint.sh because GHA overrode
          # the entrypoint.
          /entrypoint.sh pkg install -y ninja clang git patchelf ccache tur-repo
          /entrypoint.sh pkg i python3.10 -y
          ln -sf ${PREFIX}/bin/python3.10 ${PREFIX}/bin/python
          /entrypoint.sh pip install meson
      - name: build
        run: |
          touch artifact
          python --version
          ls
      - uses: actions/upload-artifact@v4.6.0
        with:
          name: artifact-${{ matrix.architecture }}
          path: artifact