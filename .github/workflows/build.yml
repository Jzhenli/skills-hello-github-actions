name: 'Test Termux'
on: [push, pull_request]
env:
  PROJECT_NAME: helloworld

jobs:
  build-android-components:
    strategy:
      matrix:
        include:
          - architecture: armv7
            qemu_arch: arm
            image_tag: arm
          - architecture: aarch64
            qemu_arch: aarch64
            image_tag: aarch64
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,aarch64

      - name: Build via QEMU
        uses: uraimo/run-on-arch-action@v3
        id: build
        with:
          arch: ${{ matrix.qemu_arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          base_image: termux/termux-docker:${{ matrix.image_tag }}
          dockerRunArgs: |
            --memory=2048m
            --cpus=2
            -v /tmp/node20:/tmp/node20
          # 单行环境变量避免格式问题
          env: "PROJECT_NAME=helloworld TERMUX_MAIN_PACKAGE_FORMAT=debian ANDROID_ROOT=/system ANDROID_DATA=/data PREFIX=/data/data/com.termux/files/usr HOME=/data/data/com.termux/files/home PATH=/data/data/com.termux/files/usr/bin TMPDIR=/data/data/com.termux/files/usr/tmp LANG=en_US.UTF-8 TZ=UTC"
          run: |
            # 调试：显示环境变量
            echo "=== ENVIRONMENT VARIABLES ==="
            printenv
            
            # 1. 准备环境
            echo "Preparing environment..."
            ln -sf $PREFIX/etc/termux/mirrors/default $PREFIX/etc/termux/chosen_mirrors || true
            chmod -R o+x $PREFIX/bin || true
            
            # 2. 安装依赖
            echo "Installing dependencies..."
            /entrypoint.sh bash -c "yes | pkg upgrade -y" || true
            /entrypoint.sh pkg install -y nodejs-lts || true
            mkdir -p /tmp/node20
            ln -sf $PREFIX/bin /tmp/node20/bin || true
            
            # 3. 安装构建工具
            echo "Installing build tools..."
            /entrypoint.sh pkg install -y ninja clang git patchelf ccache tur-repo python3.10 || true
            ln -sf $PREFIX/bin/python3.10 $PREFIX/bin/python || true
            ln -sf $PREFIX/bin/pip3.10 $PREFIX/bin/pip || true
            
            # 4. 构建项目
            echo "Building project..."
            cd /github/workspace
            pip install nuitka || true
            
            mkdir -p dist
            cd "src/$PROJECT_NAME"
            python -m nuitka --module app --include-package=app --output-dir=dist --remove-output || true
            cp ./dist/*.so ../../dist/ || true
            cd ../../dist/
            [ -f app.cpython-310.so ] && mv app.cpython-310.so app.so || true
            [ -f app.so ] && patchelf --set-rpath '' app.so || true
            [ -f app.so ] && patchelf --replace-needed libpython3.10.so.1.0 libpython3.10.so app.so || true
            
            # 5. 复制产物到共享目录
            echo "Copying artifacts..."
            mkdir -p /tmp/node20
            cp *.so /tmp/node20/ || true
            ls -la /tmp/node20 > /tmp/node20/file-list.log

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.architecture }}
          path: /tmp/node20/*.so

# name: 'Test Termux' # empty name
# on: [push, pull_request]
# env:
#   PROJECT_NAME: helloworld
# jobs:
#   # This is what is currently necessary to make termux-docker work with GHA.
#   build-android-components:
#     strategy:
#       matrix:
#         include:
#           # - runner: ubuntu-24.04
#           #   architecture: i686
#           # - runner: ubuntu-24.04
#           #   architecture: x86_64
#           - runner: ubuntu-24.04-arm
#             architecture: arm
#           - runner: ubuntu-24.04-arm
#             architecture: aarch64
#     runs-on: ${{ matrix.runner }}
#     # prepare writable volume prefix mount for actions/upload-artifact,
#     # based on the higher-profile workaround for 32-bit GNU/Linux containers explained here
#     # https://github.com/actions/upload-artifact/issues/616#issuecomment-2350667347
#     container:
#       image: termux/termux-docker:${{ matrix.architecture }}
#       volumes: 
#         - /tmp/node20:/__e/node20
#     # approximate environment variables for actions that can't be forced to use entrypoint.sh
#     env:
#       TERMUX_MAIN_PACKAGE_FORMAT: debian
#       ANDROID_ROOT: /system
#       ANDROID_DATA: /data
#       PREFIX: /data/data/com.termux/files/usr
#       HOME: /data/data/com.termux/files/home
#       PATH: /data/data/com.termux/files/usr/bin
#       TMPDIR: /data/data/com.termux/files/usr/tmp
#       LANG: en_US.UTF-8
#       TZ: UTC
#     steps:
#       - name: set pkg command to use the packages-cf.termux.dev mirror
#         run: ln -sf ${PREFIX}/etc/termux/mirrors/default ${PREFIX}/etc/termux/chosen_mirrors
#       - name: upgrade all packages to prepare for installing nodejs
#         run: /entrypoint.sh bash -c "yes | pkg upgrade -y"
#       # actions/checkout will "think" that termux's tar binary isn't executable if it doesn't have
#       # executable bit actually set for all users, since even though that permissions restriction
#       # doesn't actually apply to the root user (at least on Android), GitHub Actions' internal
#       # source code doesn't "care" and would refuse to run the binary anyway.
#       # relevant internal source code of GitHub Actions:
#       # https://github.com/actions/toolkit/blob/930c89072712a3aac52d74b23338f00bb0cfcb24/packages/io/src/io-util.ts#L167-L177
#       - name: fix executable bit for all binaries in $PREFIX/bin for all users
#         run: chmod -R o+x ${PREFIX}/bin
#       - name: install bionic-libc nodejs to force compatibility with actions/checkout and actions/upload-artifact
#         run: |
#           /entrypoint.sh pkg install -y nodejs-lts
#           ln -sf ${PREFIX}/bin /__e/node20/bin
#       - uses: actions/checkout@v4
#       - name: fix permissions of repository after actions/checkout, which ran as root user, while entrypoint.sh activates system user (1000)
#         run: chown -R 1000:1000 .
#       - name: setup
#         run: |
#           # pkg/pip need to be prefixed with /entrypoint.sh because GHA overrode
#           # the entrypoint.
#           /entrypoint.sh pkg install -y ninja clang git patchelf ccache tur-repo
#           /entrypoint.sh pkg i python3.10 -y
#           ln -sf ${PREFIX}/bin/python3.10 ${PREFIX}/bin/python
#           ln -sf ${PREFIX}/bin/pip3.10 ${PREFIX}/bin/pip
#           # /entrypoint.sh pip install nuitka
#       - name: build
#         run: |
#           python --version
#           pip install nuitka
 
#           mkdir dist
#           cd "src/$PROJECT_NAME"
#           python -m nuitka --module app --include-package=app --output-dir=dist --remove-output
#           cp ./dist/*.so ../../dist/
#           cd ../../dist/
#           mv app.cpython-310.so app.so
#           patchelf --set-rpath '' app.so
#           patchelf --replace-needed  libpython3.10.so.1.0 libpython3.10.so app.so

#       - uses: actions/upload-artifact@v4
#         with:
#           name: artifact-${{ matrix.architecture }}
#           path: dist/*.so
        
#   build-android-ARM64:
#     needs: build-android-components # 显式声明依赖关系
#     name: Android ARM64
#     runs-on: ubuntu-latest 

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: checkout components
#         uses: actions/download-artifact@v4
#         with:
#           path: dependencies/

#       - name: replace app folder with so
#         run: |
#           rm -rf "src/$PROJECT_NAME/app"
#           cp -r dependencies/artifact-aarch64/*.so "src/$PROJECT_NAME"

#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"

#       - name: Install Briefcase
#         run: |
#           python -m pip install -U pip setuptools wheel
#           python -m pip install briefcase

#       - name: Setup Environment
#         run: |
#           # Use GitHub's preinstalled JDK 17 for Android builds
#           echo JAVA_HOME="${JAVA_HOME_17_X64:-$JAVA_HOME_17_arm64}" | tee -a ${GITHUB_ENV}
#           # Enable KVM permissions for the emulator
#           echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' \
#             | sudo tee /etc/udev/rules.d/99-kvm4all.rules
#           sudo udevadm control --reload-rules
#           sudo udevadm trigger --name-match=kvm

#       - name: Build and Package arm64-App
#         run: |
#           unzip -q ui/helloui.zip -d "src/$PROJECT_NAME/resources"
#           briefcase create android -C "build_gradle_extra_content = \"android.defaultConfig.ndk.abiFilters = ['arm64-v8a']\""
#           briefcase build android
#           briefcase package android -p debug-apk
      

#       - name: Upload App
#         uses: actions/upload-artifact@v4
#         with:
#           name: App-Android-ARM64
#           path: dist
#           if-no-files-found: error

#       - name: Upload Log
#         if: failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: Log-Failure-Android
#           path: logs/*        

#   build-android-ARM32:
#     needs: build-android-components # 显式声明依赖关系
#     name: Android ARM32
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
      
#       - name: checkout components
#         uses: actions/download-artifact@v4
#         with:
#           path: dependencies/

#       - name: replace app folder with so
#         run: |
#           rm -rf "src/$PROJECT_NAME/app"
#           cp -r dependencies/artifact-arm/*.so "src/$PROJECT_NAME"

#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"

#       - name: Install Briefcase
#         run: |
#           python -m pip install -U pip setuptools wheel
#           python -m pip install briefcase

#       - name: Setup Environment
#         run: |
#           # Use GitHub's preinstalled JDK 17 for Android builds
#           echo JAVA_HOME="${JAVA_HOME_17_X64:-$JAVA_HOME_17_arm64}" | tee -a ${GITHUB_ENV}
#           # Enable KVM permissions for the emulator
#           echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' \
#             | sudo tee /etc/udev/rules.d/99-kvm4all.rules
#           sudo udevadm control --reload-rules
#           sudo udevadm trigger --name-match=kvm

#       - name: Build and Package arm32-App
#         run: |
#           unzip -q ui/helloui.zip -d "src/$PROJECT_NAME/resources"
#           briefcase create android -C "build_gradle_extra_content = \"android.defaultConfig.ndk.abiFilters = ['armeabi-v7a']\""
#           briefcase build android
#           briefcase package android -p debug-apk

#       - name: Upload App
#         uses: actions/upload-artifact@v4
#         with:
#           name: App-Android-ARM32
#           path: dist
#           if-no-files-found: error

#       - name: Upload Log
#         if: failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: Log-Failure-Android
#           path: logs/*

#   build-Win64:
#     name: Win64
#     runs-on: windows-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Setup Environment
#         run: |
#           pip install briefcase==0.3.23 nuitka==1.0.6 ordered-set==4.1.0

#       - name: compile app to pyd with nuitka
#         shell: cmd
#         run: |
#           cd src/%PROJECT_NAME%
#           python -m nuitka --module app --include-package=app --output-dir=dist --remove-output
#           copy .\dist\*.pyd .
#           rmdir /S /Q .\dist
#           rmdir /S /Q .\app

#       - name: package coode with briefcase
#         shell: cmd
#         run: |
#           briefcase create
#           briefcase build
#           briefcase package -p zip

#       - name: Upload Windows Executable
#         uses: actions/upload-artifact@v4
#         with:
#           name: Win64
#           path: dist/*.zip


#   build-Win64-console-app:
#     name: Win64-console
#     runs-on: windows-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Setup Environment
#         run: |
#           pip install briefcase==0.3.23 nuitka==1.0.6 ordered-set==4.1.0

#       - name: compile app to pyd with nuitka
#         shell: cmd
#         run: |
#           cd src/%PROJECT_NAME%
#           python -m nuitka --module app --include-package=app --output-dir=dist --remove-output
#           copy .\dist\*.pyd .
#           rmdir /S /Q .\dist
#           rmdir /S /Q .\app

#       - name: package coode with briefcase
#         shell: cmd
#         run: |
#           briefcase create -C "console_app = true"
#           briefcase build
#           briefcase package -p zip

#       - name: Upload Windows Executable
#         uses: actions/upload-artifact@v4
#         with:
#           name: Win64-console
#           path: dist/*.zip


#   build-ARMv7:
#     name: ARMv7
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build for ARMv7
#         uses: uraimo/run-on-arch-action@v3
#         id: build4arm7
#         with:
#           arch: armv7
#           distro: bullseye
#           githubToken: ${{ github.token }}
#           env: '{ 
#               "PROJECT_NAME": "${{ env.PROJECT_NAME }}",
#               "PYPI_EXTRA_URL": "https://www.piwheels.org/simple"
#             }'
#           run: |
#             apt-get update && apt-get install -y \
#               git \
#               gcc \
#               python3-pip \
#               python3-dev \
#               patchelf

#             python3 -m pip install --upgrade pip
#             pip3 install briefcase==0.3.23 nuitka==2.4.11 --extra-index-url $PYPI_EXTRA_URL

#             cd "src/$PROJECT_NAME"
#             python3 -m nuitka --module app --include-package=app --output-dir=dist --remove-output
#             cp ./dist/*.so .
#             rm -rf dist
#             rm -rf app

#             cd ../..
#             briefcase create
#             briefcase build
#             briefcase package

#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: ARMv7
#           path: dist/*.deb


